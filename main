import pygame
import Bird
import column
from constants import *
import random
from math import hypot
import pickle

birds_f = 'birds.data'

win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Flappy Bird')

bg = pygame.image.load('Attachment/bg2.jpg')
p_bird = pygame.image.load('Attachment/bird5.png')
col_up = pygame.image.load('Attachment/Col_up.png')
col_down = pygame.image.load('Attachment/col_down.png')

'''f = open(birds_f, 'rb')
player = pickle.load(f)
f.close()'''

player = []
for i in range(100):
    player.append(Bird.Bird(random.randint(-100, 100),
                            random.randint(-100, 100),
                            random.randint(-100, 100)))

columns = []

time = 1;

i = 0
j = 0
live = True

t = 0

c = 0


def drawWindow():
    win.blit(bg, (0, 0))
    for n in player:
        if not n.death:
            win.blit(p_bird, (n.x, n.y))

    for n in columns:
        win.blit(col_up, (n.x, n.y - 630))
        win.blit(col_down, (n.x, n.y + 100))

    pygame.display.update()


def hybrid(players):
    max1 = 0
    o1 = -1
    max2 = 0
    o2 = -1
    max3 = 0
    o3 = -1
    for n in range(len(players)):
        if players[n].fit >= max1:
            max1 = players[n].fit
            o1 = n
    for n in range(len(players)):
        if players[n].fit >= max2 and n != o1:
            max2 = players[n].fit
            o2 = n
    for n in range(len(players)):
        if players[n].fit >= max1 and n != o1 and n != o2:
            max3 = players[n].fit
            o3 = n

    birds = []
    birds.append(players[o1])
    birds.append(players[o2])
    birds.append(players[o3])

    players2 = []
    for n in range(4):
        for i in range(3):
            for j in range(3):
                for k in range(3):
                    mutation_x = random.random() * 20
                    if random.randint(0, 1):
                        x = birds[i].w_n1 + mutation_x
                    else:
                        x = birds[i].w_n1 - mutation_x

                    mutation_y = random.random() * 20
                    if random.randint(0, 1):
                        y = birds[j].w_n2 + mutation_y
                    else:
                        y = birds[j].w_n2 - mutation_y

                    mutation_z = random.random() * 20
                    if random.randint(0, 1):
                        z = birds[k].w_n3 + mutation_z
                    else:
                        z = birds[k].w_n3 - mutation_z

                    players2.append(Bird.Bird(x, y, z))

    for i in birds:
        players2.append(Bird.Bird(i.w_n1, i.w_n2, i.w_n3))

    players.clear()

    birds.clear()

    return players2


def hybrid_v2(players):
    birds_all = []

    for i in range(len(players)):
        birds_all.append([i, players[i].fit])

    for i in range(len(birds_all)):
        max = 0
        for j in range(i, len(birds_all)):
            if birds_all[j][1] > max:
                max = birds_all[j][1]
                g = j
        birds_all[i], birds_all[g] = birds_all[g], birds_all[i]

    birds_best = []

    for f in range(20):
        birds_best.append(birds_all[f])

    players2 = []
    x = [1, 2]
    y = [1, 2]
    z = [1, 2]

    heh = [i for i in range(20)]
    huh = []
    for i in range(20):
        q = 19 - i
        qi = random.randint(0, q)
        huh.append(heh.pop(qi))

    for i in range(10):
        x[0] = players[birds_best[huh[i * 2]][0]].w_n1
        y[0] = players[birds_best[huh[i * 2]][0]].w_n2
        z[0] = players[birds_best[huh[i * 2]][0]].w_n3

        x[1] = players[birds_best[huh[2 * i + 1]][0]].w_n1
        y[1] = players[birds_best[huh[2 * i + 1]][0]].w_n2
        z[1] = players[birds_best[huh[2 * i + 1]][0]].w_n3

        for j in range(2):
            for k in range(2):
                for h in range(2):
                    mutation_x = random.random() * 100
                    if random.randint(0, 1):
                        w_n1 = x[j] + mutation_x
                    else:
                        w_n1 = x[j] - mutation_x
                    mutation_y = random.random() * 100
                    if random.randint(0, 1):
                        w_n2 = y[k] + mutation_y
                    else:
                        w_n2 = y[k] - mutation_y
                    mutation_z = random.random() * 100
                    if random.randint(0, 1):
                        w_n3 = z[h] + mutation_z
                    else:
                        w_n3 = z[h] - mutation_z
                    players2.append(Bird.Bird(w_n1, w_n2, w_n3))
        players2.append(Bird.Bird(x[0], y[0], z[0]))
        players2.append(Bird.Bird(x[1], y[1], z[1]))

    birds_best.clear()
    birds_all.clear()

    players.clear()
    return players2


def sign(u):
    if u >= 0:
        return True
    else:
        return False


run = True
while run:

    pygame.time.delay(10)

    if (i == 0) and (j < 100):
        columns.append(column.column())
        j += 1

    i += 1

    if j == 100:
        run = False
        print('100!!! Congratulation!!!')

    for n in player:
        if not n.death:
            n.fit += 1

    last_column = columns[c]
    if last_column.x + 148 < 80:
        c += 1

    for n in player:
        n.n1 = n.y
        dy2 = abs(n.y - last_column.y + 100)
        dy3 = abs(n.y - last_column.y - 100)
        dx = abs(n.x + 34 - (last_column.x + 102))
        n.n2 = hypot(dx, dy2)
        n.n3 = hypot(dx, dy3)
        n.output = sign(n.n1 * n.w_n1 + n.n2 * n.w_n2 + n.n3 * n.w_n3 + 100)
        if n.output:
            n.t = 5

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    if i >= 50:
        i = 0

    if c == 0:
        for n in player:
            for k in range(c, c + 1):
                if (((n.x >= columns[k].x - 10) and (n.x <= columns[k].x + 147)) and (
                        (n.y <= columns[k].y - 100) or (
                        n.y >= columns[k].y + 100))) or n.y >= 780:
                    n.death = True
    if c >= 1:
        for n in player:
            for k in range(c - 1, c + 1):
                if (((n.x >= columns[k].x - 10) and (n.x <= columns[k].x + 147)) and (
                        (n.y <= columns[k].y - 100) or (
                        n.y >= columns[k].y + 100))) or n.y >= 780:
                    n.death = True

    if not live:
        '''f = open(birds_f, 'wb')
        pickle.dump(player, f)
        f.close()'''
        player = hybrid_v2(player)
        columns.clear()
        i = 0
        j = 0
        live = True
        print(c)
        c = 0

    for n in player:
        if n.t == 0:
            n.y += VEL_Y
        else:
            n.y -= 26
            n.t -= 1
    for n in columns:
        n.x -= VEL_X

    p = 0

    for n in player:
        if not n.death:
            p = 1

    if p == 0:
        live = False

    drawWindow()

pygame.quit()
